# Tips for Jax code implementation
The reward code is written in JAX, a numerical computing library that is similar to NumPy, but with the ability to run on accelerators like GPUs and TPUs.
Most of the NumPy functions have been implemented in JAX, but there are some differences and limitations that you should be aware of when writing JAX code.
The code is compiled using a just-in-time (JIT) compiler and there are unusable Python constructs in JAX, such as loops and conditionals.
Also, the different array shape between input and output could make some errors on methods (e.g., jnp.unique)

### Attempted boolean conversion of traced array with shape bool[].
In JAX, standard Python if statements cannot be used within JIT-compiled functions, as they create dynamic control flow that JAXâ€™s JIT compiler cannot process. This restriction exists because JAX requires static, vectorized operations to perform optimized computation. To handle conditional logic, use JAX functions like jax.numpy.where or mask arrays instead of if statements. Additionally, consider structuring the code with static conditions outside of JIT-compiled functions if possible, or using control flow functions provided by JAX such as jax.lax.cond and jax.lax.switch for cases requiring conditional branching.

[Before]
if current_diameter > diameter_penalty_threshold:
    diameter_penalty = (current_diameter - diameter_penalty_threshold) * 0.5
    reward -= diameter_penalty

[After]
jnp.where(current_diameter > diameter_penalty_threshold, (current_diameter - diameter_penalty_threshold) * 0.5, reward)

[Before]
if function_call():
    arr.append((x, y))
[After]
jax.lax.cond(function_call(array, x, y), lambda _: arr.append((x, y)), lambda _: None, None) # condition, true_fun, false_fun, operand)

[Before]
cnt += function_call(curr_array, x, y)
[After]
cnt = jax.lax.cond(
    function_call(curr_array, x, y),
    lambda x: x + 1,  # true_fn
    lambda x: x,      # false_fn
    cnt               # input
)

### Array value allocation
Instead of ``x[idx] = y``, use ``x = x.at[idx].set(y)``

