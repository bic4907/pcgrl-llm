# The Task
Your task is to generate a reward function for the PCG agent which works in the Raid environment.
In order to maximize the fun of multiplayer games, it is possible to express different skills for the four players being generated.
The goal is to find insights that can diversify the parameter of four player agents and write code that measure how the skill and stats of the four agents (Agent0, 1, 2, and 3) clearly distinct.
Note that the PCG agent revises the game setting of one of the player agents in round-robin manner.
Accordingly, the reward function should evaluate the playtesting result and compare the improvement with previous result.

You can design factors to generate the reward function, and properly sum them up to get the final reward.
Utilize values of the playtesting results on the implementation of the design factors.
For stability of learning, design the reward to be returned in the range [0,1].

{few_shot_code_string}

Find four insight(s) to design the reward function and write it in the Python code.
Do not change the form of reward function and the argument of nested function .

Some helpful tips for writing the reward function code:
(1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
(2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
(3) Write the role of each agent (insight) and comment for each sub-function what the agents characteristics' is determined and how to calculated it.
(4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
(5) All nested functions must accept only one argument, 'kwarg'. They must not accept any other arguments under any circumstances.
(6) In the reward function you creats, do not change the form of 'reward = compute_reward(kwarg['Current'])' inside the 'if __name__ == "__main__"' block. Ensure that only the argument value of 'kwarg['Current']' is used.

<INSIGHTS>
- Agent 1's role:
- Agent 2's role:
- Agent 3's role:
- Agent 4's role:
</INSIGHTS>

Reward function:
```python
<CODE>
</CODE>
```